import requests
import sqlite3
import matplotlib.pyplot as plt
from datetime import datetime

conn = sqlite3.connect("steam_games.db")
cursor = conn.cursor

cursor.execute("""
CREATE TABLE IF NOT EXISTS games (
    app_id INTEGER PRIMARY KEY,
    name TEXT,
    genre TEXT,
    price REAL,
    release_date TEXT
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS popularity (
    app_id INTEGER,
    timestamp TEXT,
    player_count INTEGER,
    FOREIGN KEY (app_id) REFERENCES games(app_id)
)
""")

# --- Step 2: Fetch data for one game ---
app_id = 582010  # Monster Hunter: World
store_url = f"https://store.steampowered.com/api/appdetails?appids={app_id}"
players_url = f"https://api.steampowered.com/ISteamUserStats/GetNumberOfCurrentPlayers/v1/?appid={app_id}"

# Get game details (price, genre, etc.)
store_response = requests.get(store_url).json()
game_data = store_response[str(app_id)]["data"]

name = game_data["name"]
genres = ", ".join([g["description"] for g in game_data.get("genres", [])])
release_date = game_data.get("release_date", {}).get("date", "Unknown")

# Price handling
if "price_overview" in game_data:
    price = game_data["price_overview"]["final"] / 100  # comes in cents
else:
    price = 0.0  # free or unavailable

# Get current player count
players_response = requests.get(players_url).json()
player_count = players_response.get("response", {}).get("player_count", 0)

# --- Step 3: Insert into SQLite ---
cursor.execute("""
INSERT OR REPLACE INTO games (app_id, name, genre, price, release_date)
VALUES (?, ?, ?, ?, ?)
""", (app_id, name, genres, price, release_date))

cursor.execute("""
INSERT INTO popularity (app_id, timestamp, player_count)
VALUES (?, ?, ?)
""", (app_id, datetime.now().isoformat(), player_count))

conn.commit()

# --- Step 4: Simple Visualization ---
cursor.execute("""
SELECT g.name, g.price, p.player_count
FROM games g
JOIN popularity p ON g.app_id = p.app_id
WHERE g.app_id = ?
ORDER BY p.timestamp DESC
LIMIT 1
""", (app_id,))

row = cursor.fetchone()
if row:
    game_name, game_price, game_popularity = row

    plt.bar(["Price", "Player Count"], [game_price, game_popularity])
    plt.title(f"{game_name} (Price vs Popularity)")
    plt.ylabel("Value")
    plt.show()

conn.close()